unit uProcessadorTexto;

interface

uses
  System.SysUtils, System.Classes;

type
  TProcessadorTexto = class
  private
    function ContarVogais(const ATexto: string): Integer;
    function InverterPalavras(const ATexto: string): string;
  public
    function ProcessarTexto(const ATexto: string; out NumeroVogais: Integer): string;
  end;

implementation

{ TProcessadorTexto }

function TProcessadorTexto.ContarVogais(const ATexto: string): Integer;
var
  I: Integer;
  Caractere: Char;
begin
  Result := 0;
  for I := 1 to Length(ATexto) do
  begin
    Caractere := UpCase(ATexto[I]);
    if Caractere in ['A', 'E', 'I', 'O', 'U'] then
      Inc(Result);
  end;
end;

function TProcessadorTexto.InverterPalavras(const ATexto: string): string;
var
  ListaPalavras: TStringList;
  I: Integer;
begin
  ListaPalavras := TStringList.Create;
  try
    // Divide a string em palavras
    ListaPalavras.Delimiter := ' ';
    ListaPalavras.StrictDelimiter := True;
    ListaPalavras.DelimitedText := ATexto;

    // Inverte a ordem das palavras
    for I := 0 to (ListaPalavras.Count div 2) - 1 do
      ListaPalavras.Exchange(I, ListaPalavras.Count - 1 - I);

    Result := ListaPalavras.DelimitedText;
  finally
    ListaPalavras.Free;
  end;
end;

function TProcessadorTexto.ProcessarTexto(const ATexto: string; out NumeroVogais: Integer): string;
begin
  NumeroVogais := ContarVogais(ATexto);
  Result := InverterPalavras(ATexto);
end;

end.
